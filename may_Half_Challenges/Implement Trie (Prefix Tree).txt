

class Trie {
    
    TrieNode root;
    
    static class TrieNode {
        char value;
        TrieNode[] children = new TrieNode[26]; //alphabets only lowercase
        boolean isWordEnd;
        TrieNode(char value) {
            this.value = value;
            this.isWordEnd = false;
            this.initChildren();
        }
        
        public void initChildren() {
            for (int i = 0; i < 26; i++) {
                children[i] = null;
            }
        }
        
    }

    /** Initialize your data structure here. */
    public Trie() {
        this.root = new TrieNode('\u0000');
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode temp = root;
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
        	if (temp.children[c - 97] == null) {
            	temp.children[c - 97] = new TrieNode(c);            	
            }
        	temp = temp.children[c - 97];
        }
        temp.isWordEnd = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode temp = root;
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if (temp.children[c - 97] == null) return false;
            temp = temp.children[c - 97];
        }
        return temp.isWordEnd;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode temp = root;
        for (int i = 0; i < prefix.length(); i++) {
            char c = prefix.charAt(i);
            if (temp.children[c - 97] == null) return false;
            temp = temp.children[c - 97];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
